// Generated by CoffeeScript 1.6.3
(function() {
  var ArrayController, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ArrayController = (function(_super) {
    __extends(ArrayController, _super);

    function ArrayController() {
      _ref = ArrayController.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ArrayController.copy = function(array) {
      return array.slice();
    };

    ArrayController.copyRange = function(array, index, length) {
      return array.slice(index, index + length);
    };

    ArrayController.equals = function(array, array2) {
      var element, index, _i, _len;
      if (array2.length !== array.length) {
        return false;
      }
      for (index = _i = 0, _len = array2.length; _i < _len; index = ++_i) {
        element = array2[index];
        if (element !== array[index]) {
          return false;
        }
      }
      return true;
    };

    ArrayController.hasObject = function(array, object) {
      return __indexOf.call(array, object) >= 0;
    };

    ArrayController.hasAnyOfObjects = function(array, objects) {
      var object, _i, _len;
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        object = objects[_i];
        if (this.hasObject(array, object)) {
          return true;
        }
      }
      return false;
    };

    ArrayController.hasAllOfObjects = function(array, objects) {
      var object, _i, _len;
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        object = objects[_i];
        if (!this.hasObject(array, object)) {
          return false;
        }
      }
      return true;
    };

    ArrayController.addObject = function(array, object) {
      return array.push(object);
    };

    ArrayController.addObjects = function(array, objects) {
      var object, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        object = objects[_i];
        _results.push(this.addObject(array, object));
      }
      return _results;
    };

    ArrayController.insertObject = function(array, object, index) {
      return array.splice(index, 0, object);
    };

    ArrayController.removeObject = function(array, object) {
      var index, _results;
      _results = [];
      while (true) {
        index = array.indexOf(object);
        if (index === -1) {
          break;
        }
        _results.push(array.splice(index, 1));
      }
      return _results;
    };

    ArrayController.removeObjects = function(array, objects) {
      var object, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        object = objects[_i];
        _results.push(this.removeObject(array, object));
      }
      return _results;
    };

    ArrayController.removeFirstObject = function(array, object) {
      var index;
      index = array.indexOf(object);
      if (index !== -1) {
        return array.splice(index, 1);
      }
    };

    ArrayController.removeLastObject = function(array, object) {
      var index;
      index = array.lastIndexOf(object);
      if (index !== -1) {
        return array.splice(index, 1);
      }
    };

    ArrayController.replaceObject = function(array, object, index) {
      return array.splice(index, 1, object);
    };

    ArrayController.moveObjectByOffset = function(array, object, offset) {
      var index;
      index = array.indexOf(object);
      this.removeFirstObject(array, object);
      if (index + offset < 0 || index + offset > array.length) {
        throw new Error('cannot move outside of range ' + index + ' by ' + offset);
      }
      return this.insertObject(array, object, index + offset);
    };

    ArrayController.range = function(start, count) {
      var array, end;
      if (typeof count === 'undefined') {
        count = start;
        start = 0;
      }
      end = start + count;
      array = [];
      while (start < end) {
        this.addObject(array, start);
        start++;
      }
      return array;
    };

    return ArrayController;

  })(Object);

  module.exports = ArrayController;

}).call(this);
